type Channel @model @auth(rules: [{ allow: groups, groups: ["SuperAdmin"] }, { allow: owner }]) {
  id: ID!
  chatSpaceId: ID! @index(name: "byChatSpace", queryField: "channelsByChatSpaceId") # For Public purposes
  apiHost: String
  chatflowId: String

  name: String!
  initialPrompts: [InitialPrompt!]
  isPublic: Boolean! @default(value: "false")
}

type InitialPrompt {
  display: String
  prompt: String!
}

type ChannelUserAccess @model @auth(rules: [{ allow: owner }]) {
  # Access ID is the userId. This way a user can effectively retrieve all their accesses.
  # These can then be filtered by chatSpaceId, hostType, role, etc.
  accessId: String! @primaryKey(sortKeyFields: ["channelId"])
  channelId: ID! @index(name: "byChannel", queryField: "channelUserAccessByChannelId") # To retrieve all accesses to a Channel
  chatSpaceId: ID!

  channelHostId: String!
    @index(name: "byChannelHost", queryField: "channelUserAccessByChannelHostId")
  channelHostType: HostType!

  role: ChannelUserRole!
  channelName: String!
  channelDescription: String
}

enum ChannelUserRole {
  OWNER ## Can DELETE
  ADMIN ## Can DELETE
  WRITE
  READ
}

type ChannelDocument @model @auth(rules: [{ allow: groups, groups: ["SuperAdmin"] }]) {
  channelId: ID! @primaryKey(sortKeyFields: ["id"])
  id: ID!

  s3Key: String
  fileType: String
  fileName: String
  fileSize: Int
}

type ChannelHistoryItem @model @auth(rules: [{ allow: owner }]) {
  ownerId: ID! @primaryKey(sortKeyFields: ["channelId", "id"])
  channelId: ID!
  id: ID!

  type: ChannelItemType!
  content: String
}

enum ChannelItemType {
  NOTE
  QUESTION
  ANSWER
}
