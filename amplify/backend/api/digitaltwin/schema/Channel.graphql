type Channel
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["SuperAdmin"] }
      { allow: groups, groupsField: "admin" }
      { allow: groups, groupsField: "members", operations: [read] }
      { allow: private, operations: [read] } ## TODO: remove this after custom lambda is implemented
      { allow: public, provider: iam, operations: [read] } ## TODO: remove this after custom lambda is implemented
    ]
  ) {
  chatSpaceId: ID! @primaryKey(sortKeyFields: ["id"])
  id: ID!
  apiHost: String
  chatflowId: String

  name: String!
  initialPrompts: [InitialPrompt!]
  isLive: Boolean! @default(value: "false")

  admin: String!
  members: [String!]
}

type InitialPrompt {
  display: String
  prompt: String!
}

type ChannelDocument
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["SuperAdmin"] }
      { allow: groups, groupsField: "admin" }
      { allow: groups, groupsField: "members", operations: [read] }
      { allow: private, operations: [get] } ## TODO: remove this after custom lambda is implemented
      { allow: public, provider: iam, operations: [get] } ## TODO: remove this after custom lambda is implemented
    ]
  ) {
  channelId: ID! @primaryKey(sortKeyFields: ["id"])
  id: ID!

  s3Key: String
  fileType: String
  fileName: String
  fileSize: Int

  admin: String!
  members: [String!]
}

type ChannelItem @model @auth(rules: [{ allow: owner }]) {
  ownerId: ID! @primaryKey(sortKeyFields: ["channelId", "id"])
  channelId: ID!
  id: ID!

  type: ChannelItemType!
  content: String
}

enum ChannelItemType {
  NOTE
  QUESTION
  ANSWER
}
