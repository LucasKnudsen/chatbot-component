type SubscriptionEvent @aws_iam {
  sessionId: String!
  data: AWSJSON!
}

input HandleChannelsInput {
  flow: HandleChannelsFlowType!
  data: AWSJSON
}

enum HandleChannelsFlowType {
  UPDATE
  CREATE
  DELETE
  LIST
  GET
}

input HandleChannelHistoryInput {
  flow: HandleChannelHistoryFlowType!
  data: AWSJSON
}

enum HandleChannelHistoryFlowType {
  LIST_BY_CHANNEL
  LIST_BY_OWNER
  CREATE
  DELETE
}

input HandleStorageInput {
  flow: HandleChannelsFlowType!
  channelId: String!
  filesToRetrieve: AWSJSON
}

type HandleStorageOutput {
  signedUrls: [String!]
}

input HandleNewHubInput {
  flow: String!
  adminId: String!
  adminEmail: String!
  organizationId: String!
  chatSpaceId: String!
  hostType: HostType!
}

type Mutation {
  publish2channel(sessionId: String!, data: AWSJSON!): SubscriptionEvent
    @function(name: "broadcastResolver-${env}")
    @aws_iam

  handleChannels(input: HandleChannelsInput!): Channel
    @function(name: "handleChannels-${env}")
    @auth(rules: [{ allow: private }])

  handleChannelDocuments(input: HandleChannelsInput!): [ChannelDocument!]
    @function(name: "handleChannelDocuments-${env}")
    @auth(rules: [{ allow: private }])

  handleChannelHistory(input: HandleChannelHistoryInput!): [ChannelHistoryItem!]
    @function(name: "handleChannelHistory-${env}")
    @auth(rules: [{ allow: private }])

  handleStorage(input: HandleStorageInput!): HandleStorageOutput!
    @function(name: "handleStorage-${env}")
    @auth(rules: [{ allow: private }])

  indexKnowledge(input: AWSJSON!): ChannelDocument
    @function(name: "knowledgeIndexing-${env}")
    @auth(rules: [{ allow: private }])

  handleNewHub(input: HandleNewHubInput!): String!
    @function(name: "createNewHub-${env}")
    @auth(rules: [{ allow: groups, groups: ["SuperAdmin"] }])
}
